<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~ Copyright (c) 2018 Sparta Systems, Inc.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<apex:page StandardController="CMPL123CME__Investigation__c" extensions="CMPL123CME.CMPL_123_INV_PItems" showheader="false" sidebar="false" id="pg">
    <apex:includeScript value="{!URLFOR($Resource.CMPL123CME__AASRAggregation, '/js/jquery-3.5.1.min.js')}"/>

    <!-- JS to handle lightning navigation-->
    <apex:includeScript value="/support/console/49.0/integration.js"/>
    <apex:includeScript value="{!URLFOR($Resource.CMPL123__Compliance123, '/js/lexUtil.js')}"/>

    <style>
        .popupBackground {
            background-color:black;
            opacity: 0.20;
            filter: alpha(opacity = 20);
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 9998;

        }
        .custPopup {
            width:520px;
            height:auto;
            left:25%;
            top:20px;
            background-color:white;
            border-width: 2px;
            border-style:solid;
            z-index: 9999;
            align:center;
            padding:10px;
            position: absolute;
        }

        .btn {
            color: #333;
            border: 1px solid #b5b5b5;
            border-bottom-color: #7f7f7f;
            background: #e8e8e9 url('/img/alohaSkin/btn_sprite.png') repeat-x right top;
            font-weight: bold;
            font-size: .9em;
            border-radius: 3px;
        }
        .investigation-item-audit-link {
            text-decoration:underline;
            float:right;
            margin-right:2%;
            font-size:14px;
            color:#428bca;
        }

    </style>
	
    <script>
        //Variables to store record and page Ids
        var recordId = "{!JSENCODE(CMPL123CME__Investigation__c.id)}";
        var pageId = "{!JSENCODE(pageId)}";
        var relatedId;

        //Fix for on page load auto focus for datepicker
        function setFocusOnLoad() {}

        function switchMenu(obj,obj1,obj2) {
            var el = document.getElementById(obj);
            if( el.style.display !== 'none' ) {
                el.style.display = 'none';
            }else{
                el.style.display = '';
            }

            var e2 = document.getElementById(obj1);
            if ( e2.style.display !== 'none' ) {
                e2.style.display = 'none';
            } else {
                e2.style.display = '';
            }

            var e3 = document.getElementById(obj2);
            if ( e2.style.display !== 'none' ) {
                e3.style.display = 'none';
            } else {
                e3.style.display = '';
            }
        }

        relatedId = "{!JSENCODE($CurrentPage.parameters.id)}";


        function getSelectedInvestigationItemsInPopup() {
            var selectedInvestigationTemplateItems = [];
            $("input[type='checkbox']:checked").each(function() {

                if($(this).attr("class") !== 'headerChkBox' && $(this).attr("class") !== undefined) {
                    selectedInvestigationTemplateItems.push($(this).attr("class").split('-')[1]);
                }

            });

            return selectedInvestigationTemplateItems;
        }

        /**
         * tbd
         *
         * @param {Object} elementObj the Button Element to check
         */
        function checkInvestigationItem(elementObj) {
            disableSaveButton(elementObj);
            document.getElementById("popup-error-block").innerText = "";
            document.getElementById("popup-error-block").style.display = "none";

            var selectedInvestigationTemplateItems = getSelectedInvestigationItemsInPopup();

            if (selectedInvestigationTemplateItems.length > 0) {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.CMPL_123_INV_PItems.setInvestigations}', relatedId, selectedInvestigationTemplateItems,
                    function(result, event) {
                        // Service Call Fails in an Expected (Sparta Handled) Way
                        if(result && result.notification && result.notification.errors.length > 0) {
                            var errorArray = result.notification.errors;
                            displayPopupErrors([{ message: '{!JSENCODE($Label.cmpl123cme__permission_error)}'}]);
                            enableSaveButton(elementObj);
                        } else {
                            if (!event.status) {
                                // Service call failed because of a Salesforce issue or unhandled error
                                displayPopupErrors([{ message: '{!JSENCODE($Label.cmpl123cme__permission_error)}'}]);
                                enableSaveButton(elementObj);
                            } else {
                                // Service call was successful
                                // refresh contents of investigation item table
                                addFormInfoMessage('Investigation Items Saved Successfully!');
                                showFormInfoBlock(true);
                                closePopup();
                                //Adding support for Lightning Experience and Classic in Console App
                                if(lexUtil.isConsoleTheme()){
                                    lexUtil.refreshFocusedParentTab();
                                }
                                lexUtil.navigateByUserTheme(recordId, pageId);
                            }
                        }
                    },{escape:true});
            } else {
                displayPopupErrors([{ message: '{!JSENCODE($Label.cmpl123cme__cmplt_select_atleast_one_question)}'}]);
                enableSaveButton(elementObj);
            }

        }

        /**
         * Prompts the user with the errors contained in the param errorArray
         * @param errorArray the array of errors to display for the user
         * @return none
         */
        function displayPopupErrors(errorArray) {
            if(errorArray) {
                if(!isArrayEmpty(errorArray)) {
                    for(var i = 0, len = errorArray.length; i < len; i++) {
                        addPopupErrorMessage(errorArray[i]);
                    }
                    // display the error block
                    $('#popup-error-block').css("display", "block");
                }
            }
        }

        /**
         * Displays the Form Info Block
         * @param {boolean} doDisplay - true to show the form info block, false to hide it
         * @return none
         */
        function showFormInfoBlock(doDisplay) {
            if(doDisplay) {
                $('#form-info-block').css("display", "block");
            } else {
                $('#form-info-block').css("display", "none");
            }
        }

        /**
         * Check if param arr is an empty array
         * @param arr the array to validate
         * @returns {boolean} true, if it is an empty array, false if it is an array with at least one value
         */
        function isArrayEmpty (arr){
            return ((typeof arr === "undefined") || arr.length === 0);
        }

        /**
         * Check if the param string is an empty string
         * @param string the value to check against
         * @returns {boolean} true if it is a non empty string, false if not
         */
        function isStringEmpty(string) {
            return ((typeof string !== "undefined") && string === '');
        }

        /**
         * Appends the errorMessage to the Popup's Error Block
         * @param errorMessage the message to display on the popup
         */
        function addPopupErrorMessage(errorMessage) {
            // verify that there was a non-empty error message passed in
            if ( !isStringEmpty(errorMessage.message) ) {
                $("#popup-error-block").append(errorMessage.message);
            }
        }

        /**
         * Appends the infoMessage to the Form's Info Block
         * @param {string} infoMessage the message to display on the form
         */
        function addFormInfoMessage(infoMessage) {
            // verify that there was a non-empty error message passed in
            if ( !isStringEmpty(infoMessage) ) {
                $("#form-info-block")[0].innerHTML = infoMessage;
            }
        }

        /**
         * Handler for the Cancel Button Press on the Popup Box
         */
        function handlePopupCancel() {
            closePopup();
        }


        /**
         * Handler for the Closing of the Popup Box
         */
        function closePopup() {
            document.getElementById("pg:fm:investPopup").style.display='none';
        }

        function checkAll(cb, cbid) {
            var inputElem = document.getElementsByTagName("input");
            for(var i=0; i<inputElem.length; i++){
                if(inputElem[i].id.indexOf(cbid) !== -1){
                    inputElem[i].checked = cb.checked;
                }
            }
        }

        function unCheckHeader(){
            $('.headerChkBox').removeAttr("checked");
        }

        function unChkHeader(val){
            if (val.checked === false) {
                $(".headerChkBox").removeAttr("checked");
            } else {
                var flag = 0;

                $("input[type='checkbox']").each(function() {
                    if($(this).attr("class") !== 'headerChkBox'){
                        if(this.checked === false){
                            flag = 1;
                        }
                    }
                });

                if(flag === 0) {
                    $(".headerChkBox").prop("checked", true);
                }

            }
        }

        function loadPage(elementObj) {
            var errorMsg = $(".messageText").text();
            if ( errorMsg === '' || errorMsg == null) {
                //Fix will support Lightning Console App and Classic Console App
                if(lexUtil.isConsoleTheme()){
                    lexUtil.refreshFocusedParentTab();
                }
                //Fix will support for Classic, Console app and Lightning experience page navigation.
                lexUtil.navigateByUserTheme(recordId, pageId);
            } else {
                enableSaveButton(elementObj);
            }
        }

        /**
         * Sets the Button to be Enabled
         *
         * @param elementObj
         */
        function enableSaveButton(elementObj) {
            elementObj.disabled = false;
            elementObj.value = '{!JSENCODE($Label.cmpl123cme__cmplt_save)}';
            elementObj.classList.remove("btnDisabled");
        }

        /**
         * Sets the Button to be in the Saving State
         *
         * @param elementObj
         */
        function disableSaveButton(elementObj) {
            elementObj.disabled = true;
            elementObj.value = '{!JSENCODE($Label.cmpl123cme__cmplt_saving)}';
            elementObj.classList.add("btnDisabled");
        }

    </script>

    <apex:outputLink styleClass="investigation-item-audit-link" value="/apex/CMPL123__AuditTrail?qid={!CMPL123CME__Investigation__c.Id}" id="theLink" target="_blank">{!$Label.cmpl123cme__cmplt_investigation_audit_trail}</apex:outputLink>
    <apex:form id="fm">

        <apex:actionFunction name="doTheThing" reRender="showMsg"/>
        <div id="form-info-block" style="display:none;" class="message confirmM3"></div>
        <div id="form-error-block" style="display:none;color:red;" class="message errorM3"></div>

        <apex:pageBlock title="{!$Label.cmpl123cme__cmplt_hello} {!$User.FirstName}! {!$Label.cmpl123cme__cmplt_investigation_steps_are_below}" mode="edit">

            <apex:pageMessages id="showMsg"/>

            <apex:outputPanel rendered="{!if(linesMap != null,false,true)}">
                <apex:outputText style="color:red;margin-left:10px;" value="{!$Label.cmpl123cme__cmplt_no_investigations_found}"></apex:outputText>
            </apex:outputPanel>

            <apex:pageBlockButtons >
                <apex:commandButton value="{!$Label.cmpl123cme__cmplt_save}" action="{!saveChanges}" rendered="{!if(linesMap != null,true,false)}" oncomplete="loadPage(this);" reRender="showMsg" onclick="disableSaveButton(this);"/>
                <apex:commandButton value="{!$Label.cmpl123cme__cmplt_add_investigations}" action="{!renderAddInvestigationsPopup}" reRender="fm" rendered="{!$Setup.CMPL123__CMPL_App_Config__c.CMPL123CME__Show_Add_Investigation_Button__c}"/>
            </apex:pageBlockButtons>

            <apex:pageBlockTable value="{!linesMap}" var="key" rendered="{!if(linesMap != null, true, false)}">
                <apex:column >
                    <apex:outputpanel id="plusimage" style="display:none;">
                        <apex:image url="/img/alohaSkin/setup/setup_plus_lev1.gif" onclick="switchMenu('{!$Component.inlinetablesec}','{!$Component.minusimage}','{!$Component.plusimage}')" title="Expand - {!key} Questions"/>
                    </apex:outputpanel>
                    <apex:outputpanel id="minusimage" >
                        <apex:image url="/img/alohaSkin/setup/setup_minus_lev1.gif" onclick="switchMenu('{!$Component.inlinetablesec}','{!$Component.plusimage}','{!$Component.minusimage}')" title="Collapse - {!key} Questions"/>
                    </apex:outputpanel>
                    {!key}
                    <apex:outputpanel id="inlinetablesec" >
                        <apex:pageblocktable value="{!linesMap[key]}" var="tsk">
                            <apex:column value="{!tsk.Row_No__c}" width="10%"/>
                            <apex:column value="{!tsk.Investigation_Step_Description__c}" width="40%"/>
                            <apex:column headerValue="{!$Label.cmpl123cme__cmplt_value}" width="25%">
                                <apex:inputField value="{!tsk.Value__c}" rendered="{!if(tsk.Investigation_Template_Item__r.Field_Type__c== 'Text',true,false)}"/>
                                <apex:inputField value="{!tsk.CMPL123CME__Checkbox_Value__c}" rendered="{!if(tsk.Investigation_Template_Item__r.Field_Type__c == 'Checkbox',true,false)}"/>
                                <apex:inputField value="{!tsk.CMPL123CME__Date_Value__c}" rendered="{!if(tsk.Investigation_Template_Item__r.Field_Type__c == 'Date',true,false)}"/>
                                <apex:inputField value="{!tsk.CMPL123CME__Datetime_Value__c}" rendered="{!if(tsk.Investigation_Template_Item__r.Field_Type__c == 'Datetime',true,false)}"/>
                                <apex:inputField value="{!tsk.CMPL123CME__Number_Value__c}" rendered="{!if(tsk.Investigation_Template_Item__r.Field_Type__c == 'Number',true,false)}"/>
                                <apex:selectList size="1" multiselect="false" value="{!tsk.Value__c}" rendered="{!if(tsk.Investigation_Template_Item__r.Field_Type__c == 'Picklist',true,false)}">
                                    <apex:selectOptions value="{!selectOptionIdMap[tsk.Investigation_Template_Item__c]}"/>
                                </apex:selectList>
                            </apex:column>
                            <apex:column headerValue="{!$Label.cmpl123cme__cmplt_completed}" width="15%">
                                <apex:inputField value="{!tsk.Completed__c}" />
                            </apex:column>
                        </apex:pageblocktable>
                    </apex:outputpanel>
                </apex:column>
            </apex:pageBlockTable>
        </apex:pageBlock>

        <apex:outputPanel id="investPopup" rendered="{!displayPopup}">

            <apex:outputPanel styleClass="popupBackground" layout="block" id="popup"/>

            <apex:outputPanel styleClass="custPopup" layout="block" id="pop">

                <apex:pageBlock title="{!$Label.cmpl123cme__cmplt_add_investigations}">

                    {!HTMLENCODE($Label.CMPL123CME__CMPLT_INVESTIGATION_NUMBER)}:&nbsp;&nbsp;

                    <apex:selectList value="{!investigationTemplateName}" size="1" onchange="invLst();">
                        <apex:actionFunction name="invLst" action="{!getInvestigationTemplateItems}" reRender="inv,fm" oncomplete="unCheckHeader();"/>
                        <apex:selectOptions value="{!InvestigationAdminNames}"/>
                    </apex:selectList>

                    <br/>
                    <br/>

                    <div id="popup-error-block" class="message errorM3" style="display:none;"></div>

                    <apex:outputPanel rendered="{!displayClose}">
                        <input type="button" value="{!HTMLENCODE($Label.CMPL123CME__CMPLT_CLOSE)}" onclick="handlePopupCancel();" style="margin-left:200px;" class="btn"/>
                    </apex:outputPanel>

                    <apex:outputPanel rendered="{!displayBlock}" id="inv">

                        <apex:pageBlock rendered="{!IF(investigationTemplateItemList != null && investigationTemplateItemList.size > 0,true,false)}">

                            <apex:pageBlockTable value="{!investigationTemplateItemList}" var="curInvestigationTemplateItem" >
                                <apex:column >
                                    <apex:facet name="header">
                                        <apex:inputCheckbox onclick="checkAll(this, 'chk');" styleClass="headerChkBox"/>
                                    </apex:facet>
                                    <apex:inputCheckbox id="chk" styleClass="chk-{!curInvestigationTemplateItem.Id}" onclick="unChkHeader(this);"/>
                                </apex:column>
                                <apex:column value="{!curInvestigationTemplateItem.CMPL123CME__Investigation_Item_Description__c}"/>
                            </apex:pageBlockTable>

                            <apex:pageBlockButtons location="bottom">
                                <input id="popup-button-save" type="button" class="btn" value="{!HTMLENCODE($Label.CMPL123CME__cmplt_save)}"  onclick="checkInvestigationItem(this);"/>
                                <input id="popup-button-cancel" type="button" value="{!HTMLENCODE($Label.CMPL123CME__CMPLT_CANCEL)}" onclick="handlePopupCancel();" class="btn" />
                            </apex:pageBlockButtons>

                        </apex:pageBlock>
                    </apex:outputPanel>

                </apex:pageBlock>
            </apex:outputPanel>
        </apex:outputPanel>
    </apex:form>
</apex:page>