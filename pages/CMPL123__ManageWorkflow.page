<apex:page standardController="CMPL123__WF_Rule__c" extensions="CMPL123.WorkflowController,CMPL123.LEXController"
           docType="html-5.0" id="pg" tabStyle="CMPL123__WF_Rule__c"
           showHeader="{! !hasError }" sidebar="{! !hasError }">

    <apex:stylesheet value="{! URLFOR($Resource.Compliance123, '/css/ManageWorkflow.css') }"/>
    <!-- Enable Lightning if we are in LEX -->
    <apex:form rendered="{!isLEX}">
        <apex:includeLightning />
    </apex:form>

    <apex:outputPanel rendered="{! hasError }">
        <c:ModalComponent showHeader="true" showFooter="false"
                          modalTitle="{! IF(isEdit, JSENCODE($Label.Edit) + ' ' + WF_Rule__c.Name, JSENCODE($Label.New) + ' ' + $ObjectType.WF_Rule__c.Label) }">
            <c:Toast messages="{! errorMessages }" isError="{! hasError }"/>
            <footer class="slds-modal__footer">
                <apex:commandButton styleClass="slds-button slds-button_brand" action="{! cancel }" value="{! $Label.OK }"/>
            </footer>
        </c:ModalComponent>
    </apex:outputPanel>

    <apex:form id="fm" rendered="{! !hasError }">
        <apex:pageblock title="{! $ObjectType.WF_Rule__c.Label }" mode="edit">
            <!-- Select object section-->
            <apex:pageBlockSection columns="1">
                <!-- Error Messages -->
                <apex:pageBlockSectionItem >
                    <apex:pageMessages />
                </apex:pageBlockSectionItem>

                <!-- START Select Object drop down -->
				<!-- If Object List size() < 1000 -->
                <apex:pageBlockSectionItem rendered="{!IF(objectList.size<1000,true,false)}">
                    <apex:outputLabel value="{!$Label.cmpl123__select_object}"/>
                    <apex:outputPanel >
                        <apex:outputText value="{!targetObject}" rendered="{!if(workflowRule != null && workflowRule.Id != null,true,false)}"/>
                        <apex:selectList id="selectlist" value="{!targetObject}" size="1" rendered="{!if(workflowRule != null && workflowRule.Id != null,false,true )}">
                            <apex:selectOption itemLabel="-{!$Label.cmpl123__select}-" itemValue=""/>
                            <apex:selectOptions value="{!objectList}"/>
                            <apex:actionSupport event="onchange" action="{!handleTargetObjectChange}"/>
                        </apex:selectList>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
				<!-- END Select Object drop down -->
				
				<!-- START Select Object drop down -->
				<!-- If Object List size() > 1000 -->
				<apex:pageBlockSectionItem rendered="{!IF(objectList.size>1000 && NOT(ISNULL(listSelectOptions)) && listSelectOptions.size>0,true,false)}">
                    <apex:outputLabel value="{!$Label.cmpl123__select_object}"/>
                    <apex:outputPanel >
                        <apex:outputText value="{!targetObject}" rendered="{!if(workflowRule != null && workflowRule.Id != null,true,false)}"/>
						<apex:variable value="{!listSelectOptions.size}" var="multiOptionSize" />
						<apex:variable value="{!startIndex}" var="currentIndex" />
                        <apex:selectList id="selectlist" value="{!targetObject}" size="1" rendered="{!if(workflowRule != null && workflowRule.Id != null,false,true )}">
                            <apex:selectOption itemLabel="-{!$Label.cmpl123__select}-" itemValue=""/>
                                <apex:selectOptions value="{!listSelectOptions[currentIndex]}" rendered="{!IF(currentIndex<multiOptionSize,true,false)}"></apex:selectOptions> 
                                <apex:selectOptions value="{!listSelectOptions[currentIndex+1]}" rendered="{!IF(currentIndex+1<multiOptionSize,true,false)}"></apex:selectOptions>
                                <apex:selectOptions value="{!listSelectOptions[currentIndex+2]}" rendered="{!IF(currentIndex+2<multiOptionSize,true,false)}"></apex:selectOptions>
                                <apex:selectOptions value="{!listSelectOptions[currentIndex+3]}" rendered="{!IF(currentIndex+3<multiOptionSize,true,false)}"></apex:selectOptions>
                                <apex:selectOptions value="{!listSelectOptions[currentIndex+4]}" rendered="{!IF(currentIndex+4<multiOptionSize,true,false)}"></apex:selectOptions>
                                <apex:selectOptions value="{!listSelectOptions[currentIndex+5]}" rendered="{!IF(currentIndex+5<multiOptionSize,true,false)}"></apex:selectOptions>
                            <apex:actionSupport event="onchange" action="{!handleTargetObjectChange}"/>
                        </apex:selectList>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
				<!-- END Select Object drop down -->

                <!-- Key Value -->
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="{! $ObjectType.WF_Rule__c.fields.Record_Type__c.Label }"/>
                    <apex:inputField value="{! workflowRule.Record_Type__c }"/>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>

            <!-- Information section -->
            <apex:pageBlockSection columns="2" rendered="{!if(workflowRule != null && targetObject  != '',true,false)}" title="{! $Label.INFORMATION }">
                <!-- Rule Name -->
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="{! $ObjectType.WF_Rule__c.fields.Name.Label }"/>
                    <apex:outputPanel styleClass="requiredInput" layout="block">
                        <apex:outputPanel styleClass="requiredBlock" layout="block"/>
                        <apex:inputField value="{! workflowRule.Name }"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>

                <!-- Has Multiple Actions Checkbox -->
                <apex:pageBlockSectionItem id="pbsichk" rendered="{!NOT(hasWorkflowReportingFields)}">
                    <apex:outputLabel value="{! $ObjectType.WF_Rule__c.fields.Has_Multiple_Actions__c.Label }"/>
                    <apex:inputField value="{!workflowRule.CMPL123__Has_Multiple_Actions__c}" onclick="handleClickMultiAction(this)" id="inputchk"/>
                </apex:pageBlockSectionItem>

                <apex:pageBlockSectionItem rendered="{!hasWorkflowReportingFields}">
                    <apex:outputLabel value="{! $ObjectType.WF_Rule__c.fields.Has_Multiple_Actions__c.Label }"/>
                    <apex:outputField value="{!workflowRule.CMPL123__Has_Multiple_Actions__c}"/>
                </apex:pageBlockSectionItem>

                <!-- Is Active Checkbox -->
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="{! $ObjectType.WF_Rule__c.fields.Is_Active__c.Label }"/>
                    <apex:inputField value="{! workflowRule.Is_Active__c }"/>
                </apex:pageBlockSectionItem>

                <!-- Create Workflow Panel Checkbox -->
                <!-- for Classic -->
                <apex:pageBlockSectionItem rendered="{! NOT(isLEX) }" helpText="{! $Label.WORKFLOW_PANEL_CHECKBOX_HELP_TEXT }">
                    <apex:outputLabel value="{! $Label.CREATE_WORKFLOW_PANEL }"/>
                    <apex:inputCheckbox value="{! createWorkflowPage }" disabled="{! isWorkflowPageCreated }"/>
                </apex:pageBlockSectionItem>
                <!-- for LEX: separate container since `apex:pageBlockSectionItem` can only have 2 child elements -->
                <apex:pageBlockSectionItem rendered="{! isLEX }">
                    <div class="tooltip-container" id="wf-panel-checkbox"></div>
                    <apex:inputCheckbox value="{! createWorkflowPage }" disabled="{! isWorkflowPageCreated }"/>
                </apex:pageBlockSectionItem>

                <!-- Description -->
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="{! $ObjectType.WF_Rule__c.fields.Description__c.Label }"/>
                    <apex:inputField value="{! workflowRule.Description__c }" style="width: 330px; height: 40px"/>
                </apex:pageBlockSectionItem>

                <!-- Create E-Signature Panel Checkbox -->
                <!-- for Classic -->
                <apex:pageBlockSectionItem rendered="{! NOT(isLEX) }" helpText="{! $Label.E_SIGN_PANEL_CHECKBOX_HELP_TEXT }">
                    <apex:outputLabel value="{! $Label.CREATE_E_SIGN_PANEL }"/>
                    <apex:inputCheckbox value="{! createEsignPage }" disabled="{! isEsignPageCreated }"/>
                </apex:pageBlockSectionItem>
                <!-- for LEX: separate container since `apex:pageBlockSectionItem` can only have 2 child elements -->
                <apex:pageBlockSectionItem rendered="{! isLEX }">
                    <div class="tooltip-container" id="e-sign-panel-checkbox"></div>
                    <apex:inputCheckbox value="{! createEsignPage }" disabled="{! isEsignPageCreated }"/>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            <!-- Lock fields configuration section -->
            <apex:pageBlockSection columns="1"
                                   rendered="{!if(workflowRule != null && targetObject  != '',true,false)}"
                                   title="{!$Label.cmpl123__wf_lock_field_configuration}">
                <apex:pageBlockSectionItem rendered="{!workflowTableWrapper.allEndStatuses.empty}">
                    <p style="text-align: center">{!$Label.cmpl123__wf_message_if_not_statuses}</p>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            <apex:outputPanel rendered="{! NOT(workflowTableWrapper.allEndStatuses.empty)}">
                <div class = "{!IF(isLEX, "table-wrapper", "table-wrapper max_width")}">
                    <div id="table-container">
                        <apex:repeat value="{!workflowTableWrapper}" var="tableWrapper">
                            <div class="container-wrapper">
                                <table id="ie-WF-table">
                                    <thead>
                                    <tr>
                                        <th>
                                            <div class="div-wrapper">
                                                {!$Label.cmpl123__wf_field_status}
                                            </div>
                                        </th>
                                        <apex:repeat value="{!tableWrapper.allEndStatuses}" var="endStatus">
                                            <th>
                                                {!endStatus}
                                            </th>
                                        </apex:repeat>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    <apex:repeat value="{!tableWrapper.rowWrappers}" var="rowWrapper">
                                        <tr>
                                            <th>
                                                <div class="div-wrapper">
                                                    {!rowWrapper.fieldLabel}
                                                </div>
                                            </th>
                                            <apex:repeat value="{!rowWrapper.statusWrappers}" var="statusWrapper">
                                                <td>
                                                    <apex:inputCheckbox value="{!statusWrapper.isChecked}"/>
                                                </td>
                                            </apex:repeat>
                                        </tr>
                                    </apex:repeat>
                                    </tbody>
                                </table>
                            </div>
                        </apex:repeat>
                    </div>
                </div>
            </apex:outputPanel>
            <!-- Buttons -->
            <apex:pageBlockButtons location="bottom" rendered="{!if(workflowRule != null && targetObject  != '',true,false)}">
                <apex:commandButton value="{!$Label.cmpl123__save}" action="{!saveWorkflow}"/>
                <apex:commandButton rendered="{!if(workflowRule.Id !=null, false, true)}" value="{!$Label.cmpl123__save_new}" action="{!saveAndNew}"/>
                <apex:commandButton value="{!$Label.cmpl123__cancel}" action="{!cancel}"/>
            </apex:pageBlockButtons>
        </apex:pageblock>
    </apex:form>

    <script>

/*=============For IE 11=====================*/
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");

    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
        isBrowserIE();
    }

function isBrowserIE() {
    correctTableInIE(this);

    function getDomElementById(i) {return document.getElementById(i);}
    function createElementBySelectorName(s) {return document.createElement(s);}
    function appendChildElement(parent, child) {parent.appendChild(child);}

    function getScrollWidth() {
        var dv = createElementBySelectorName('div');
        dv.style.overflowY = 'scroll';
        dv.style.width = '50px';
        dv.style.height = '50px';
        dv.style.position = 'absolute';
        dv.style.visibility = 'hidden';
        appendChildElement(document.body,dv);
        var scrollWidth = dv.offsetWidth - dv.clientWidth;
        document.body.removeChild(dv);
        return (scrollWidth);
    }

    function getContainerWidth(containerClassName) {
        var dv = document.getElementsByClassName(containerClassName);
        var containerWidth = dv[0].offsetWidth;
        return containerWidth;
    }

    function compareParams(tableParam, containerParam) {
        return tableParam >= containerParam;
    }

    function correctTableInIE(el) {
        FixHeaderCol(getDomElementById('ie-WF-table'), 350);
        el.parentNode.removeChild(el);
    }

    function FixHeaderCol(tbl, hh) {
        //change mackup to use in IE
        var divElement = document.getElementById('table-container');
        divElement.className += "ie-table-container";

        var tableElement = document.getElementById('ie-WF-table');
        var trElements = tableElement.getElementsByTagName('tr');
        var thElements = trElements[0].getElementsByTagName('th');

        for (var b = 0; b < thElements.length; b++) {
            var thElement = thElements[b];
            thElement.className += "ie-header-th";
        }

        for (var d = 1; d < trElements.length; d++) {
            thElements = trElements[d].getElementsByTagName('th');
            thElement = thElements[0];
            thElement.className += "ie-tbody-th";
        }

        var scrollWidth = getScrollWidth();
        var wfTableContainer = createElementBySelectorName('div');
        var tblHead = createElementBySelectorName('table');
        var tblCol = createElementBySelectorName('table');
        var tblFixCorner = createElementBySelectorName('table');
        var containerWidth = getContainerWidth('table-wrapper');

        wfTableContainer.className = 'divFixHeaderCol';

        if (compareParams(tbl.offsetWidth, containerWidth)) {
            wfTableContainer.style.width = containerWidth + 'px';
        } else {
            wfTableContainer.style.width = tbl.offsetWidth + 'px';
        }

        if (compareParams(tbl.offsetHeight, hh)) {
            wfTableContainer.style.height = hh + 'px';
        } else {
            wfTableContainer.style.height = tbl.offsetHeight + 'px';
        }

        tbl.parentNode.insertBefore(wfTableContainer,tbl);
        appendChildElement(wfTableContainer,tbl);

        var rows = tbl.rows;
        var rowsCnt = rows.length;
        var i=0;
        var j=0;
        var colspanCnt=0;
        var columnCnt=0;
        var newRow;
        var newCell;
        var td;

        for (j=0; j<rows[0].cells.length; j++) {
            columnCnt += rows[0].cells[j].colSpan;
        }
        var delta = columnCnt - 1;

        // Run one time by all rows and build fixed tables
        for (i=0; i<rowsCnt; i++) {
            columnCnt = 0; colspanCnt = 0;
            newRow = rows[i].cloneNode(true);
            td = rows[i].cells;

            for (j=0; j<td.length; j++) {
                columnCnt += td[j].colSpan;
                if (i<1) {
                    newRow.cells[j].style.width = getComputedStyle(td[j]).width;
                    appendChildElement(tblHead,newRow);
                }
            }

            newRow = createElementBySelectorName('tr');
            for (j=0; j<1; j++) {
                if (!td[j]) continue;
                colspanCnt += td[j].colSpan;
                if (columnCnt - colspanCnt >= delta) {
                    newCell = td[j].cloneNode(true);
                    newCell.style.width = getComputedStyle(td[j]).width;
                    newCell.style.height = td[j].clientHeight - parseInt(getComputedStyle(td[j]).paddingBottom) - parseInt(getComputedStyle(td[j]).paddingTop) + 'px';
                    appendChildElement(newRow,newCell);
                }
            }
            if (i<1) {appendChildElement(tblFixCorner,newRow);}
            appendChildElement(tblCol,newRow.cloneNode(true));
        }

        tblFixCorner.className = 'tblFixCorner';
        tblFixCorner.style.position = 'absolute';
        tblFixCorner.style.zIndex = '3';

        tblHead.className = 'tblHead';
        tblHead.style.position = 'absolute';
        tblHead.style.zIndex = '2';
        tblHead.style.width = tbl.offsetWidth + 'px';

        tblCol.className = 'tblCol';
        tblCol.style.position = 'absolute';
        tblCol.style.zIndex = '2';

        wfTableContainer.insertBefore(tblHead,tbl);
        wfTableContainer.insertBefore(tblFixCorner,tbl);
        wfTableContainer.insertBefore(tblCol,tbl);

        var bodyCont = createElementBySelectorName('div');
        bodyCont.style.cssText = 'position:absolute; overflow:hidden;';

        // Horizontal scroll
        var divHscroll = createElementBySelectorName('div');
        var d1 = createElementBySelectorName('div');

        divHscroll.className = 'divHscroll';
        divHscroll.style.cssText = 'width:100%; bottom:0; overflow-x:auto; overflow-y:hidden; position:absolute; z-index:3;';
        divHscroll.onscroll = function () {
            var x = -this.scrollLeft + 'px';
            bodyCont.style.left = x;
            tblHead.style.left = x;
        }

        d1.className = 'd1';
        d1.style.width = tbl.offsetWidth + scrollWidth + 'px';
        d1.style.height = '2px';

        appendChildElement(divHscroll,d1);
        appendChildElement(bodyCont,tbl);
        appendChildElement(wfTableContainer,bodyCont);
        appendChildElement(wfTableContainer,divHscroll);

        if (compareParams(tbl.offsetWidth, containerWidth)) {
            divHscroll.style.display = 'block';
        } else {
            divHscroll.style.display = 'none';
        }

        // Vertical scroll
        var divVscroll = createElementBySelectorName('div');
        var d2 = createElementBySelectorName('div');

        divVscroll.className = 'divVscroll';
        divVscroll.style.cssText = 'height:100%; right:0; overflow-x:hidden; overflow-y:auto; position:absolute; z-index:3';
        divVscroll.onscroll = function () {
            var y = -this.scrollTop + 'px';
            bodyCont.style.top = y;
            tblCol.style.top = y;
        }

        d2.style.height = tbl.offsetHeight + scrollWidth + 'px';
        d2.style.width = scrollWidth + 'px';

        appendChildElement(divVscroll,d2);
        appendChildElement(wfTableContainer,divVscroll);

        if (compareParams(tbl.offsetHeight, hh)) {
            divVscroll.style.display = 'block';
        } else {
            divVscroll.style.display = 'none';
        }
    }
}
/*=============For IE 11=====================*/
        document.addEventListener("DOMContentLoaded", generateTooltips);

        function generateTooltips() {
            generateTooltipByTarget(
                "wf-panel-checkbox",
                "{! JSENCODE($Label.CREATE_WORKFLOW_PANEL) }",
                "{! JSENCODE($Label.WORKFLOW_PANEL_CHECKBOX_HELP_TEXT) }"
            );
            generateTooltipByTarget(
                "e-sign-panel-checkbox",
                "{! JSENCODE($Label.CREATE_E_SIGN_PANEL) }",
                "{! JSENCODE($Label.E_SIGN_PANEL_CHECKBOX_HELP_TEXT) }"
            );
        }

        function generateTooltipByTarget(target, fieldLabel, helpText) {
            if (document.querySelector("#" + target)) {
                $Lightning.use("CMPL123:SpartaLabelTooltipApp", function () {
                    $Lightning.createComponent(
                        "CMPL123:spartaLabelTooltip",
                        {
                            text: fieldLabel,
                            tooltipText: helpText
                        },
                        target
                    );
                });
            }
        }

        function handleClickMultiAction(element) {
            if (element.checked) {
                let multiActionConfirmMessage = '{! JSENCODE($Label.BY_ACTIVATING_CUSTOM_WORKFLOW_ACTION_AND_STATUS) }';
                multiActionConfirmMessage = multiActionConfirmMessage.replace(/\\n/gm, '\n');  // newline characters need to be unescaped
                if(!confirm(multiActionConfirmMessage)){
                    element.checked = false;
                }
            }
        }
    </script>
</apex:page>